import AsyncStorage from '@react-native-async-storage/async-storage';

const BASE_URL = 'https://elderlybackend.onrender.com';

class ApiService {
  // Get auth headers
  async getAuthHeaders() {
    console.log('üîë Getting auth headers...');
    const token = await AsyncStorage.getItem('accessToken');
    console.log('üîë Token found:', token ? `${token.substring(0, 20)}...` : 'NO TOKEN');
    
    if (!token) {
      console.error('‚ùå No auth token found');
      throw new Error('No auth token');
    }
    
    return {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
  }

  // Test connection method
  async testConnection() {
    console.log('üîç Testing API connection...');
    try {
      const startTime = Date.now();
      const response = await fetch(`${BASE_URL}/health`, {
        method: 'GET',
        timeout: 10000,
        headers: {
          'Content-Type': 'application/json'
        }
      });
      
      const endTime = Date.now();
      const responseTime = endTime - startTime;
      
      console.log('üîç Connection test response:', {
        status: response.status,
        ok: response.ok,
        responseTime: `${responseTime}ms`,
        url: `${BASE_URL}/health`
      });
      
      if (response.ok) {
        const data = await response.json().catch(() => ({ message: 'Health check OK' }));
        return {
          success: true,
          status: response.status,
          responseTime,
          message: 'API connection successful',
          data
        };
      } else {
        return {
          success: false,
          status: response.status,
          responseTime,
          message: `API returned ${response.status}`,
          error: response.statusText
        };
      }
    } catch (error) {
      console.error('üîç Connection test failed:', error);
      return {
        success: false,
        error: error.message,
        message: 'API connection failed',
        details: {
          name: error.name,
          code: error.code,
          timeout: error.name === 'AbortError' || error.message.includes('timeout')
        }
      };
    }
  }

  // ‚úÖ Profile API - Properly handles your API response format
  async getProfile() {
    console.log('üìã Starting getProfile API call...');
    const debugInfo = {
      timestamp: new Date().toISOString(),
      method: 'GET',
      endpoint: '/profile'
    };
    
    try {
      const headers = await this.getAuthHeaders();
      console.log("üîë Auth headers prepared:", {
        hasAuth: !!headers.Authorization,
        contentType: headers['Content-Type']
      });
      
      const url = `${BASE_URL}/profile`;
      
      console.log('üåê Making request to:', url);
      console.log('üîë Request headers:', {
        hasAuth: headers.Authorization ? 'YES' : 'NO',
        contentType: headers['Content-Type']
      });
      
      const startTime = Date.now();
      const response = await fetch(url, { 
        method: 'GET',
        headers 
      });
      const endTime = Date.now();
      
      // ‚úÖ DETAILED RESPONSE DEBUGGING
      console.log('üì• Raw Response Properties:', {
        status: response.status,
        statusText: response.statusText,
        ok: response.ok,
        type: response.type,
        bodyUsed: response.bodyUsed,
        hasDataProperty: 'data' in response, // This will be false
        responseKeys: Object.keys(response)
      });
      
      debugInfo.responseTime = `${endTime - startTime}ms`;
      debugInfo.status = response.status;
      debugInfo.ok = response.ok;
      
      console.log('üì• Response timing info:', debugInfo);
      
      if (!response.ok) {
        console.log('‚ùå Response not OK, getting error text...');
        const errorText = await response.text();
        console.error('‚ùå Error response body:', errorText);
        debugInfo.errorBody = errorText;
        
        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
      }
      
      // ‚úÖ EXTRACT JSON DATA - This is where your actual data comes from
      console.log('üîÑ Response OK, extracting JSON data...');
      const jsonData = await response.json();
      
      // ‚úÖ LOG YOUR ACTUAL API RESPONSE STRUCTURE
      console.log('üì• Complete API Response:', {
        success: jsonData.success,
        message: jsonData.message,
        hasData: !!jsonData.data,
        userData: jsonData.data?.user ? {
          id: jsonData.data.user.id,
          name: jsonData.data.user.name,
          email: jsonData.data.user.email,
          role: jsonData.data.user.role
        } : null,
        profileData: jsonData.data?.profile ? {
          hasPersonalInfo: !!jsonData.data.profile.personalInfo,
          hasWallet: !!jsonData.data.profile.wallet,
          walletBalance: jsonData.data.profile.wallet?.balance,
          hasAddress: !!jsonData.data.profile.address
        } : null,
        recentTransactions: jsonData.data?.recentTransactions?.length || 0
      });
      
      console.log('‚úÖ Profile API success:', {
        success: jsonData.success,
        hasUser: !!jsonData.data?.user,
        userName: jsonData.data?.user?.name,
        hasProfile: !!jsonData.data?.profile,
        walletBalance: jsonData.data?.profile?.wallet?.balance
      });
      
      return jsonData;
    } catch (error) {
      console.error('üí• Profile API Error:', {
        ...debugInfo,
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack?.split('\n').slice(0, 3)
        }
      });
      throw error;
    }
  }

  // ‚úÖ Wallet API - Properly handles your API response format
  async getWallet() {
    console.log('üí≥ Starting getWallet API call...');
    const debugInfo = {
      timestamp: new Date().toISOString(),
      method: 'GET',
      endpoint: '/wallet'
    };
    
    try {
      const headers = await this.getAuthHeaders();
      const url = `${BASE_URL}/wallet`;
      
      console.log('üåê Making wallet request to:', url);
      
      const startTime = Date.now();
      const response = await fetch(url, { 
        method: 'GET',
        headers 
      });
      const endTime = Date.now();
      
      debugInfo.responseTime = `${endTime - startTime}ms`;
      debugInfo.status = response.status;
      debugInfo.ok = response.ok;
      
      console.log('üì• Wallet response received:', debugInfo);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Wallet error response:', errorText);
        debugInfo.errorBody = errorText;
        
        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
      }
      
      // ‚úÖ EXTRACT JSON DATA PROPERLY
      const jsonData = await response.json();
      
      console.log('üì• Wallet JSON Response:', {
        success: jsonData.success,
        message: jsonData.message,
        hasWalletData: !!jsonData.data?.wallet,
        walletBalance: jsonData.data?.wallet?.balance,
        walletCurrency: jsonData.data?.wallet?.currency,
        fullWalletData: jsonData.data?.wallet
      });
      
      console.log('‚úÖ Wallet API success:', {
        success: jsonData.success,
        hasWallet: !!jsonData.data?.wallet,
        balance: jsonData.data?.wallet?.balance
      });
      
      return jsonData;
    } catch (error) {
      console.error('üí• Wallet API Error:', {
        ...debugInfo,
        error: {
          name: error.name,
          message: error.message,
          stack: error.stack?.split('\n')[0]
        }
      });
      throw error;
    }
  }

  // Update profile
  async updateProfile(profileData) {
    console.log('üìù Updating profile with data:', Object.keys(profileData));
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/profile`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(profileData)
      });
      
      console.log('üìù Update profile response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Update profile error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Profile updated successfully');
      return result;
    } catch (error) {
      console.error('üí• Update profile error:', error);
      throw error;
    }
  }

  // Get wallet balance
  async getWalletBalance() {
    console.log('üí∞ Getting wallet balance...');
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/wallet/balance`, {
        method: 'GET',
        headers 
      });
      
      console.log('üí∞ Balance response status:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Balance error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Balance retrieved:', result.data?.balance);
      return result;
    } catch (error) {
      console.error('üí• Balance error:', error);
      throw error;
    }
  }

  // ‚úÖ Add money to own wallet (for non-elderly users)
  async addMoney(amount, paymentMethod = 'bank_transfer') {
    console.log('üè¶ ApiService.addMoney called');
    console.log('üè¶ Input amount:', amount);
    console.log('üè¶ Input paymentMethod:', paymentMethod);
    console.log('üè¶ Amount type:', typeof amount);
    
    try {
      console.log('üîë Getting auth headers...');
      const headers = await this.getAuthHeaders();
      console.log('üîë Auth headers obtained:', Object.keys(headers));
      
      const url = `${BASE_URL}/transactions/add-money`;
      console.log('üåê API URL:', url);
      console.log('üåê BASE_URL:', BASE_URL);
      
      const payload = {
        amount,
        paymentMethod,
        gatewayTransactionId: `TXN_${Date.now()}`,
        description: `Wallet top-up of ‚Çπ${amount}`
      };
      console.log('üì§ Request payload:', payload);
      
      console.log('üöÄ Making fetch request...');
      const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload)
      });
      
      console.log('üì• Response received');
      console.log('üì• Response status:', response.status);
      console.log('üì• Response statusText:', response.statusText);
      console.log('üì• Response ok:', response.ok);
      console.log('üì• Response headers:', Object.fromEntries(response.headers.entries()));
      
      if (!response.ok) {
        console.error('‚ùå Response not OK');
        const errorText = await response.text();
        console.error('‚ùå Error response body:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      console.log('üìÑ Parsing response as JSON...');
      const jsonData = await response.json();
      console.log('‚úÖ JSON parsed successfully:', jsonData);
      
      return jsonData;
    } catch (error) {
      console.error('üí• ApiService.addMoney error:');
      console.error('üí• Error name:', error.name);
      console.error('üí• Error message:', error.message);
      console.error('üí• Error stack:', error.stack);
      console.error('üí• Full error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Family member adds money to elderly wallet
  async addMoneyToElderlyWallet(elderlyUserId, amount, paymentMethod = 'bank_transfer', senderNote = '') {
    console.log('üí∞ Family adding money to elderly wallet:', { elderlyUserId, amount, senderNote });
    console.log('üí∞ Amount type:', typeof amount);
    console.log('üí∞ Payment method:', paymentMethod);
    
    try {
      console.log('üîë Getting auth headers for family transfer...');
      const headers = await this.getAuthHeaders();
      console.log('üîë Auth headers obtained for family transfer');
      
      const url = `${BASE_URL}/transactions/add-money-to-elderly`;
      console.log('üåê Family transfer URL:', url);
      
      const payload = {
        elderlyUserId,
        amount: parseFloat(amount), // Ensure it's a number
        paymentMethod,
        gatewayTransactionId: `FAM_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
        description: `Family support - ‚Çπ${amount}`,
        senderNote: senderNote || `Money transfer from family member`
      };
      
      console.log('üí∞ Family transfer payload:', {
        ...payload,
        gatewayTransactionId: payload.gatewayTransactionId.substring(0, 20) + '...'
      });
      
      console.log('üöÄ Making family transfer request...');
      const response = await fetch(url, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload)
      });
      
      console.log('üì• Family transfer response received');
      console.log('üì• Response status:', response.status);
      console.log('üì• Response ok:', response.ok);
      
      if (!response.ok) {
        console.error('‚ùå Family transfer response not OK');
        const errorText = await response.text();
        console.error('‚ùå Family transfer error body:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
      }
      
      console.log('üìÑ Parsing family transfer response...');
      const result = await response.json();
      console.log('‚úÖ Family transfer successful:', {
        success: result.success,
        recipientName: result.data?.recipient?.name,
        newBalance: result.data?.recipient?.newBalance,
        senderName: result.data?.sender?.name
      });
      
      return result;
    } catch (error) {
      console.error('üí• Family transfer error:');
      console.error('üí• Error name:', error.name);
      console.error('üí• Error message:', error.message);
      console.error('üí• Error stack:', error.stack?.split('\n').slice(0, 3));
      throw error;
    }
  }

  // ‚úÖ NEW: Get elderly family members for money transfer
  async getElderlyFamilyMembers() {
    console.log('üë¥ Getting elderly family members...');
    try {
      console.log('üîë Getting auth headers for elderly members...');
      const headers = await this.getAuthHeaders();
      
      const url = `${BASE_URL}/transactions/elderly-family-members`;
      console.log('üåê Elderly members URL:', url);
      
      console.log('üöÄ Making elderly members request...');
      const response = await fetch(url, {
        method: 'GET',
        headers
      });
      
      console.log('üì• Elderly members response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Elderly members error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText} - ${errorText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Elderly family members retrieved:', {
        success: result.success,
        count: result.data?.elderlyMembers?.length || 0,
        members: result.data?.elderlyMembers?.map(m => m.name) || []
      });
      
      return result;
    } catch (error) {
      console.error('üí• Elderly family members error:', error);
      throw error;
    }
  }

  // Get transactions
  async getTransactions(page = 1, limit = 20) {
    console.log('üìä Getting transactions:', { page, limit });
    try {
      const headers = await this.getAuthHeaders();
      const url = `${BASE_URL}/transactions?page=${page}&limit=${limit}`;
      
      console.log('üìä Transactions URL:', url);
      
      const response = await fetch(url, { method: 'GET', headers });
      
      console.log('üìä Transactions response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Transactions error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Transactions retrieved:', result.data?.transactions?.length || 0);
      return result;
    } catch (error) {
      console.error('üí• Transactions error:', error);
      throw error;
    }
  }

  // Send money between users
  async sendMoney(recipientId, amount, description) {
    console.log('üí∞ Sending money:', { recipientId, amount, description });
    try {
      const headers = await this.getAuthHeaders();
      const payload = {
        recipientId,
        amount,
        description,
        category: 'family_transfer'
      };
      
      console.log('üí∞ Send money payload:', payload);
      
      const response = await fetch(`${BASE_URL}/transactions/send-money`, {
        method: 'POST',
        headers,
        body: JSON.stringify(payload)
      });
      
      console.log('üí∞ Send money response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Send money error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Money sent successfully');
      return result;
    } catch (error) {
      console.error('üí• Send money error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Get transaction statistics
  async getTransactionStats() {
    console.log('üìà Getting transaction stats...');
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/transactions/stats`, {
        method: 'GET',
        headers
      });
      
      console.log('üìà Transaction stats response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Transaction stats error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Transaction stats retrieved');
      return result;
    } catch (error) {
      console.error('üí• Transaction stats error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Get family members for transactions
  async getFamilyMembers() {
    console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Getting family members...');
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/transactions/family-members`, {
        method: 'GET',
        headers
      });
      
      console.log('üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Family members response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Family members error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Family members retrieved:', result.data?.familyMembers?.length || 0);
      return result;
    } catch (error) {
      console.error('üí• Family members error:', error);
      throw error;
    }
  }

  // Order APIs (Mock for now)
  async placeOrder(orderData) {
    console.log('üõí Placing order:', orderData);
    try {
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const order = {
        success: true,
        message: 'Order placed successfully',
        data: {
          orderId: `ORD${Date.now()}`,
          ...orderData,
          status: 'confirmed',
          estimatedDelivery: '30-45 mins'
        }
      };
      
      console.log('‚úÖ Order placed:', order.data.orderId);
      return order;
    } catch (error) {
      console.error('üí• Order placement error:', error);
      throw error;
    }
  }

  async getOrders(page = 1, limit = 10) {
    console.log('üì¶ Getting orders:', { page, limit });
    try {
      await new Promise(resolve => setTimeout(resolve, 500));
      
      const { orderHistory } = require('../data/dummyData');
      const result = {
        success: true,
        data: {
          orders: orderHistory,
          pagination: {
            currentPage: page,
            totalPages: 1,
            totalOrders: orderHistory.length
          }
        }
      };
      
      console.log('‚úÖ Orders retrieved:', result.data.orders.length);
      return result;
    } catch (error) {
      console.error('üí• Get orders error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Emergency contact APIs
  async getEmergencyContacts() {
    console.log('üö® Getting emergency contacts...');
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/profile/emergency-contacts`, {
        method: 'GET',
        headers
      });
      
      console.log('üö® Emergency contacts response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Emergency contacts error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Emergency contacts retrieved');
      return result;
    } catch (error) {
      console.error('üí• Emergency contacts error:', error);
      throw error;
    }
  }

  async updateEmergencyContact(contactData) {
    console.log('üö® Updating emergency contact:', contactData);
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/profile/emergency-contacts`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(contactData)
      });
      
      console.log('üö® Update emergency contact response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Update emergency contact error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Emergency contact updated successfully');
      return result;
    } catch (error) {
      console.error('üí• Update emergency contact error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Health info APIs
  async getHealthInfo() {
    console.log('üè• Getting health info...');
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/profile/health`, {
        method: 'GET',
        headers
      });
      
      console.log('üè• Health info response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Health info error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Health info retrieved');
      return result;
    } catch (error) {
      console.error('üí• Health info error:', error);
      throw error;
    }
  }

  async updateHealthInfo(healthData) {
    console.log('üè• Updating health info:', Object.keys(healthData));
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/profile/health`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(healthData)
      });
      
      console.log('üè• Update health info response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Update health info error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Health info updated successfully');
      return result;
    } catch (error) {
      console.error('üí• Update health info error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Preferences APIs
  async updatePreferences(preferences) {
    console.log('‚öôÔ∏è Updating preferences:', Object.keys(preferences));
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/profile/preferences`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(preferences)
      });
      
      console.log('‚öôÔ∏è Update preferences response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Update preferences error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Preferences updated successfully');
      return result;
    } catch (error) {
      console.error('üí• Update preferences error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Group/Family APIs
  async getUserGroups() {
    console.log('üë• Getting user groups...');
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/profile/groups`, {
        method: 'GET',
        headers
      });
      
      console.log('üë• User groups response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå User groups error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ User groups retrieved:', result.data?.groups?.length || 0);
      return result;
    } catch (error) {
      console.error('üí• User groups error:', error);
      throw error;
    }
  }

  // ‚úÖ NEW: Wallet settings APIs
  async updateWalletSettings(settings) {
    console.log('üí≥ Updating wallet settings:', Object.keys(settings));
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/wallet/settings`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(settings)
      });
      
      console.log('üí≥ Update wallet settings response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Update wallet settings error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Wallet settings updated successfully');
      return result;
    } catch (error) {
      console.error('üí• Update wallet settings error:', error);
      throw error;
    }
  }

  async verifyBankAccount(bankDetails) {
    console.log('üè¶ Verifying bank account...');
    try {
      const headers = await this.getAuthHeaders();
      const response = await fetch(`${BASE_URL}/wallet/verify-bank`, {
        method: 'POST',
        headers,
        body: JSON.stringify(bankDetails)
      });
      
      console.log('üè¶ Verify bank account response:', response.status);
      
      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Verify bank account error:', errorText);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const result = await response.json();
      console.log('‚úÖ Bank account verification completed');
      return result;
    } catch (error) {
      console.error('üí• Bank account verification error:', error);
      throw error;
    }
  }
}

export default new ApiService();